/**
 *
 *  ApiKeys.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/BaseBuilder.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/SqlBinder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <iostream>
#include <json/json.h>
#include <memory>
#include <stdint.h>
#include <string>
#include <string_view>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <tuple>
#include <vector>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
} // namespace orm
} // namespace drogon
namespace drogon_model
{
namespace mercury
{

class ApiKeys
{
  public:
    struct Cols
    {
        static const std::string _api_id;
        static const std::string _user_id;
        static const std::string _key_hash;
        static const std::string _api_name;
        static const std::string _created_at;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit ApiKeys(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit ApiKeys(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    ApiKeys(const Json::Value &pJson,
            const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    ApiKeys() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void
    updateByMasqueradedJson(const Json::Value &pJson,
                            const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(
        const Json::Value &, const std::vector<std::string> &pMasqueradingVector, std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(
        const Json::Value &, const std::vector<std::string> &pMasqueradingVector, std::string &err);
    static bool validJsonOfField(size_t index, const std::string &fieldName,
                                 const Json::Value &pJson, std::string &err, bool isForCreation);

    /**  For column api_id  */
    /// Get the value of the column api_id, returns the default value if the column is null
    const int64_t &getValueOfApiId() const noexcept;
    /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object
    /// if the column is null
    const std::shared_ptr<int64_t> &getApiId() const noexcept;
    /// Set the value of the column api_id
    void setApiId(const int64_t &pApiId) noexcept;

    /**  For column user_id  */
    /// Get the value of the column user_id, returns the default value if the column is null
    const int64_t &getValueOfUserId() const noexcept;
    /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object
    /// if the column is null
    const std::shared_ptr<int64_t> &getUserId() const noexcept;
    /// Set the value of the column user_id
    void setUserId(const int64_t &pUserId) noexcept;

    /**  For column key_hash  */
    /// Get the value of the column key_hash, returns the default value if the column is null
    const std::string &getValueOfKeyHash() const noexcept;
    /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object
    /// if the column is null
    const std::shared_ptr<std::string> &getKeyHash() const noexcept;
    /// Set the value of the column key_hash
    void setKeyHash(const std::string &pKeyHash) noexcept;
    void setKeyHash(std::string &&pKeyHash) noexcept;

    /**  For column api_name  */
    /// Get the value of the column api_name, returns the default value if the column is null
    const std::string &getValueOfApiName() const noexcept;
    /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object
    /// if the column is null
    const std::shared_ptr<std::string> &getApiName() const noexcept;
    /// Set the value of the column api_name
    void setApiName(const std::string &pApiName) noexcept;
    void setApiName(std::string &&pApiName) noexcept;

    /**  For column created_at  */
    /// Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object
    /// if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    /// Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;

    static size_t getColumnNumber() noexcept
    {
        return 5;
    }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<ApiKeys>;
    friend drogon::orm::BaseBuilder<ApiKeys, true, true>;
    friend drogon::orm::BaseBuilder<ApiKeys, true, false>;
    friend drogon::orm::BaseBuilder<ApiKeys, false, true>;
    friend drogon::orm::BaseBuilder<ApiKeys, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<ApiKeys>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    /// For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> apiId_;
    std::shared_ptr<int64_t> userId_;
    std::shared_ptr<std::string> keyHash_;
    std::shared_ptr<std::string> apiName_;
    std::shared_ptr<::trantor::Date> createdAt_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[5] = {false};

  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql = "select * from " + tableName + " where api_id = $1";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql = "delete from " + tableName + " where api_id = $1";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql = "insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        sql += "api_id,";
        ++parametersCount;
        if (dirtyFlag_[1])
        {
            sql += "user_id,";
            ++parametersCount;
        }
        if (dirtyFlag_[2])
        {
            sql += "key_hash,";
            ++parametersCount;
        }
        if (dirtyFlag_[3])
        {
            sql += "api_name,";
            ++parametersCount;
        }
        sql += "created_at,";
        ++parametersCount;
        if (!dirtyFlag_[4])
        {
            needSelection = true;
        }
        needSelection = true;
        if (parametersCount > 0)
        {
            sql[sql.length() - 1] = ')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder = 1;
        char placeholderStr[64];
        size_t n = 0;
        sql += "default,";
        if (dirtyFlag_[1])
        {
            n = snprintf(placeholderStr, sizeof(placeholderStr), "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if (dirtyFlag_[2])
        {
            n = snprintf(placeholderStr, sizeof(placeholderStr), "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if (dirtyFlag_[3])
        {
            n = snprintf(placeholderStr, sizeof(placeholderStr), "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        if (dirtyFlag_[4])
        {
            n = snprintf(placeholderStr, sizeof(placeholderStr), "$%d,", placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql += "default,";
        }
        if (parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if (needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace mercury
} // namespace drogon_model

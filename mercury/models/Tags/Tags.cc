/**
 *
 *  Tags.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Tags.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::mercury;

const std::string Tags::Cols::_tag_id = "\"tag_id\"";
const std::string Tags::Cols::_user_id = "\"user_id\"";
const std::string Tags::Cols::_tag_name = "\"tag_name\"";
const std::string Tags::primaryKeyName = "tag_id";
const bool Tags::hasPrimaryKey = true;
const std::string Tags::tableName = "\"tags\"";

const std::vector<typename Tags::MetaData> Tags::metaData_ = {
    {"tag_id", "int64_t", "bigint", 8, 1, 1, 1},
    {"user_id", "int64_t", "bigint", 8, 0, 0, 1},
    {"tag_name", "std::string", "character varying", 100, 0, 0, 1}};
const std::string &Tags::getColumnName(size_t index) noexcept(false) {
  assert(index < metaData_.size());
  return metaData_[index].colName_;
}
Tags::Tags(const Row &r, const ssize_t indexOffset) noexcept {
  if (indexOffset < 0) {
    if (!r["tag_id"].isNull()) {
      tagId_ = std::make_shared<int64_t>(r["tag_id"].as<int64_t>());
    }
    if (!r["user_id"].isNull()) {
      userId_ = std::make_shared<int64_t>(r["user_id"].as<int64_t>());
    }
    if (!r["tag_name"].isNull()) {
      tagName_ = std::make_shared<std::string>(r["tag_name"].as<std::string>());
    }
  } else {
    size_t offset = (size_t)indexOffset;
    if (offset + 3 > r.size()) {
      LOG_FATAL << "Invalid SQL result for this model";
      return;
    }
    size_t index;
    index = offset + 0;
    if (!r[index].isNull()) {
      tagId_ = std::make_shared<int64_t>(r[index].as<int64_t>());
    }
    index = offset + 1;
    if (!r[index].isNull()) {
      userId_ = std::make_shared<int64_t>(r[index].as<int64_t>());
    }
    index = offset + 2;
    if (!r[index].isNull()) {
      tagName_ = std::make_shared<std::string>(r[index].as<std::string>());
    }
  }
}

Tags::Tags(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
  if (pMasqueradingVector.size() != 3) {
    LOG_ERROR << "Bad masquerading vector";
    return;
  }
  if (!pMasqueradingVector[0].empty() &&
      pJson.isMember(pMasqueradingVector[0])) {
    dirtyFlag_[0] = true;
    if (!pJson[pMasqueradingVector[0]].isNull()) {
      tagId_ = std::make_shared<int64_t>(
          (int64_t)pJson[pMasqueradingVector[0]].asInt64());
    }
  }
  if (!pMasqueradingVector[1].empty() &&
      pJson.isMember(pMasqueradingVector[1])) {
    dirtyFlag_[1] = true;
    if (!pJson[pMasqueradingVector[1]].isNull()) {
      userId_ = std::make_shared<int64_t>(
          (int64_t)pJson[pMasqueradingVector[1]].asInt64());
    }
  }
  if (!pMasqueradingVector[2].empty() &&
      pJson.isMember(pMasqueradingVector[2])) {
    dirtyFlag_[2] = true;
    if (!pJson[pMasqueradingVector[2]].isNull()) {
      tagName_ = std::make_shared<std::string>(
          pJson[pMasqueradingVector[2]].asString());
    }
  }
}

Tags::Tags(const Json::Value &pJson) noexcept(false) {
  if (pJson.isMember("tag_id")) {
    dirtyFlag_[0] = true;
    if (!pJson["tag_id"].isNull()) {
      tagId_ = std::make_shared<int64_t>((int64_t)pJson["tag_id"].asInt64());
    }
  }
  if (pJson.isMember("user_id")) {
    dirtyFlag_[1] = true;
    if (!pJson["user_id"].isNull()) {
      userId_ = std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
    }
  }
  if (pJson.isMember("tag_name")) {
    dirtyFlag_[2] = true;
    if (!pJson["tag_name"].isNull()) {
      tagName_ = std::make_shared<std::string>(pJson["tag_name"].asString());
    }
  }
}

void Tags::updateByMasqueradedJson(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector) noexcept(false) {
  if (pMasqueradingVector.size() != 3) {
    LOG_ERROR << "Bad masquerading vector";
    return;
  }
  if (!pMasqueradingVector[0].empty() &&
      pJson.isMember(pMasqueradingVector[0])) {
    if (!pJson[pMasqueradingVector[0]].isNull()) {
      tagId_ = std::make_shared<int64_t>(
          (int64_t)pJson[pMasqueradingVector[0]].asInt64());
    }
  }
  if (!pMasqueradingVector[1].empty() &&
      pJson.isMember(pMasqueradingVector[1])) {
    dirtyFlag_[1] = true;
    if (!pJson[pMasqueradingVector[1]].isNull()) {
      userId_ = std::make_shared<int64_t>(
          (int64_t)pJson[pMasqueradingVector[1]].asInt64());
    }
  }
  if (!pMasqueradingVector[2].empty() &&
      pJson.isMember(pMasqueradingVector[2])) {
    dirtyFlag_[2] = true;
    if (!pJson[pMasqueradingVector[2]].isNull()) {
      tagName_ = std::make_shared<std::string>(
          pJson[pMasqueradingVector[2]].asString());
    }
  }
}

void Tags::updateByJson(const Json::Value &pJson) noexcept(false) {
  if (pJson.isMember("tag_id")) {
    if (!pJson["tag_id"].isNull()) {
      tagId_ = std::make_shared<int64_t>((int64_t)pJson["tag_id"].asInt64());
    }
  }
  if (pJson.isMember("user_id")) {
    dirtyFlag_[1] = true;
    if (!pJson["user_id"].isNull()) {
      userId_ = std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
    }
  }
  if (pJson.isMember("tag_name")) {
    dirtyFlag_[2] = true;
    if (!pJson["tag_name"].isNull()) {
      tagName_ = std::make_shared<std::string>(pJson["tag_name"].asString());
    }
  }
}

const int64_t &Tags::getValueOfTagId() const noexcept {
  static const int64_t defaultValue = int64_t();
  if (tagId_)
    return *tagId_;
  return defaultValue;
}
const std::shared_ptr<int64_t> &Tags::getTagId() const noexcept {
  return tagId_;
}
void Tags::setTagId(const int64_t &pTagId) noexcept {
  tagId_ = std::make_shared<int64_t>(pTagId);
  dirtyFlag_[0] = true;
}
const typename Tags::PrimaryKeyType &Tags::getPrimaryKey() const {
  assert(tagId_);
  return *tagId_;
}

const int64_t &Tags::getValueOfUserId() const noexcept {
  static const int64_t defaultValue = int64_t();
  if (userId_)
    return *userId_;
  return defaultValue;
}
const std::shared_ptr<int64_t> &Tags::getUserId() const noexcept {
  return userId_;
}
void Tags::setUserId(const int64_t &pUserId) noexcept {
  userId_ = std::make_shared<int64_t>(pUserId);
  dirtyFlag_[1] = true;
}

const std::string &Tags::getValueOfTagName() const noexcept {
  static const std::string defaultValue = std::string();
  if (tagName_)
    return *tagName_;
  return defaultValue;
}
const std::shared_ptr<std::string> &Tags::getTagName() const noexcept {
  return tagName_;
}
void Tags::setTagName(const std::string &pTagName) noexcept {
  tagName_ = std::make_shared<std::string>(pTagName);
  dirtyFlag_[2] = true;
}
void Tags::setTagName(std::string &&pTagName) noexcept {
  tagName_ = std::make_shared<std::string>(std::move(pTagName));
  dirtyFlag_[2] = true;
}

void Tags::updateId(const uint64_t id) {}

const std::vector<std::string> &Tags::insertColumns() noexcept {
  static const std::vector<std::string> inCols = {"user_id", "tag_name"};
  return inCols;
}

void Tags::outputArgs(drogon::orm::internal::SqlBinder &binder) const {
  if (dirtyFlag_[1]) {
    if (getUserId()) {
      binder << getValueOfUserId();
    } else {
      binder << nullptr;
    }
  }
  if (dirtyFlag_[2]) {
    if (getTagName()) {
      binder << getValueOfTagName();
    } else {
      binder << nullptr;
    }
  }
}

const std::vector<std::string> Tags::updateColumns() const {
  std::vector<std::string> ret;
  if (dirtyFlag_[1]) {
    ret.push_back(getColumnName(1));
  }
  if (dirtyFlag_[2]) {
    ret.push_back(getColumnName(2));
  }
  return ret;
}

void Tags::updateArgs(drogon::orm::internal::SqlBinder &binder) const {
  if (dirtyFlag_[1]) {
    if (getUserId()) {
      binder << getValueOfUserId();
    } else {
      binder << nullptr;
    }
  }
  if (dirtyFlag_[2]) {
    if (getTagName()) {
      binder << getValueOfTagName();
    } else {
      binder << nullptr;
    }
  }
}
Json::Value Tags::toJson() const {
  Json::Value ret;
  if (getTagId()) {
    ret["tag_id"] = (Json::Int64)getValueOfTagId();
  } else {
    ret["tag_id"] = Json::Value();
  }
  if (getUserId()) {
    ret["user_id"] = (Json::Int64)getValueOfUserId();
  } else {
    ret["user_id"] = Json::Value();
  }
  if (getTagName()) {
    ret["tag_name"] = getValueOfTagName();
  } else {
    ret["tag_name"] = Json::Value();
  }
  return ret;
}

Json::Value Tags::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const {
  Json::Value ret;
  if (pMasqueradingVector.size() == 3) {
    if (!pMasqueradingVector[0].empty()) {
      if (getTagId()) {
        ret[pMasqueradingVector[0]] = (Json::Int64)getValueOfTagId();
      } else {
        ret[pMasqueradingVector[0]] = Json::Value();
      }
    }
    if (!pMasqueradingVector[1].empty()) {
      if (getUserId()) {
        ret[pMasqueradingVector[1]] = (Json::Int64)getValueOfUserId();
      } else {
        ret[pMasqueradingVector[1]] = Json::Value();
      }
    }
    if (!pMasqueradingVector[2].empty()) {
      if (getTagName()) {
        ret[pMasqueradingVector[2]] = getValueOfTagName();
      } else {
        ret[pMasqueradingVector[2]] = Json::Value();
      }
    }
    return ret;
  }
  LOG_ERROR << "Masquerade failed";
  if (getTagId()) {
    ret["tag_id"] = (Json::Int64)getValueOfTagId();
  } else {
    ret["tag_id"] = Json::Value();
  }
  if (getUserId()) {
    ret["user_id"] = (Json::Int64)getValueOfUserId();
  } else {
    ret["user_id"] = Json::Value();
  }
  if (getTagName()) {
    ret["tag_name"] = getValueOfTagName();
  } else {
    ret["tag_name"] = Json::Value();
  }
  return ret;
}

bool Tags::validateJsonForCreation(const Json::Value &pJson, std::string &err) {
  if (pJson.isMember("tag_id")) {
    if (!validJsonOfField(0, "tag_id", pJson["tag_id"], err, true))
      return false;
  }
  if (pJson.isMember("user_id")) {
    if (!validJsonOfField(1, "user_id", pJson["user_id"], err, true))
      return false;
  } else {
    err = "The user_id column cannot be null";
    return false;
  }
  if (pJson.isMember("tag_name")) {
    if (!validJsonOfField(2, "tag_name", pJson["tag_name"], err, true))
      return false;
  } else {
    err = "The tag_name column cannot be null";
    return false;
  }
  return true;
}
bool Tags::validateMasqueradedJsonForCreation(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector, std::string &err) {
  if (pMasqueradingVector.size() != 3) {
    err = "Bad masquerading vector";
    return false;
  }
  try {
    if (!pMasqueradingVector[0].empty()) {
      if (pJson.isMember(pMasqueradingVector[0])) {
        if (!validJsonOfField(0, pMasqueradingVector[0],
                              pJson[pMasqueradingVector[0]], err, true))
          return false;
      }
    }
    if (!pMasqueradingVector[1].empty()) {
      if (pJson.isMember(pMasqueradingVector[1])) {
        if (!validJsonOfField(1, pMasqueradingVector[1],
                              pJson[pMasqueradingVector[1]], err, true))
          return false;
      } else {
        err = "The " + pMasqueradingVector[1] + " column cannot be null";
        return false;
      }
    }
    if (!pMasqueradingVector[2].empty()) {
      if (pJson.isMember(pMasqueradingVector[2])) {
        if (!validJsonOfField(2, pMasqueradingVector[2],
                              pJson[pMasqueradingVector[2]], err, true))
          return false;
      } else {
        err = "The " + pMasqueradingVector[2] + " column cannot be null";
        return false;
      }
    }
  } catch (const Json::LogicError &e) {
    err = e.what();
    return false;
  }
  return true;
}
bool Tags::validateJsonForUpdate(const Json::Value &pJson, std::string &err) {
  if (pJson.isMember("tag_id")) {
    if (!validJsonOfField(0, "tag_id", pJson["tag_id"], err, false))
      return false;
  } else {
    err = "The value of primary key must be set in the json object for update";
    return false;
  }
  if (pJson.isMember("user_id")) {
    if (!validJsonOfField(1, "user_id", pJson["user_id"], err, false))
      return false;
  }
  if (pJson.isMember("tag_name")) {
    if (!validJsonOfField(2, "tag_name", pJson["tag_name"], err, false))
      return false;
  }
  return true;
}
bool Tags::validateMasqueradedJsonForUpdate(
    const Json::Value &pJson,
    const std::vector<std::string> &pMasqueradingVector, std::string &err) {
  if (pMasqueradingVector.size() != 3) {
    err = "Bad masquerading vector";
    return false;
  }
  try {
    if (!pMasqueradingVector[0].empty() &&
        pJson.isMember(pMasqueradingVector[0])) {
      if (!validJsonOfField(0, pMasqueradingVector[0],
                            pJson[pMasqueradingVector[0]], err, false))
        return false;
    } else {
      err =
          "The value of primary key must be set in the json object for update";
      return false;
    }
    if (!pMasqueradingVector[1].empty() &&
        pJson.isMember(pMasqueradingVector[1])) {
      if (!validJsonOfField(1, pMasqueradingVector[1],
                            pJson[pMasqueradingVector[1]], err, false))
        return false;
    }
    if (!pMasqueradingVector[2].empty() &&
        pJson.isMember(pMasqueradingVector[2])) {
      if (!validJsonOfField(2, pMasqueradingVector[2],
                            pJson[pMasqueradingVector[2]], err, false))
        return false;
    }
  } catch (const Json::LogicError &e) {
    err = e.what();
    return false;
  }
  return true;
}
bool Tags::validJsonOfField(size_t index, const std::string &fieldName,
                            const Json::Value &pJson, std::string &err,
                            bool isForCreation) {
  switch (index) {
  case 0:
    if (pJson.isNull()) {
      err = "The " + fieldName + " column cannot be null";
      return false;
    }
    if (isForCreation) {
      err = "The automatic primary key cannot be set";
      return false;
    }
    if (!pJson.isInt64()) {
      err = "Type error in the " + fieldName + " field";
      return false;
    }
    break;
  case 1:
    if (pJson.isNull()) {
      err = "The " + fieldName + " column cannot be null";
      return false;
    }
    if (!pJson.isInt64()) {
      err = "Type error in the " + fieldName + " field";
      return false;
    }
    break;
  case 2:
    if (pJson.isNull()) {
      err = "The " + fieldName + " column cannot be null";
      return false;
    }
    if (!pJson.isString()) {
      err = "Type error in the " + fieldName + " field";
      return false;
    }
    if (pJson.isString() && std::strlen(pJson.asCString()) > 100) {
      err = "String length exceeds limit for the " + fieldName +
            " field (the maximum value is 100)";
      return false;
    }

    break;
  default:
    err = "Internal error in the server";
    return false;
  }
  return true;
}

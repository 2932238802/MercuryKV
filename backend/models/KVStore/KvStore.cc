/**
 *
 *  KvStore.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "KvStore.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::mercury;

const std::string KvStore::Cols::_kv_id = "\"kv_id\"";
const std::string KvStore::Cols::_user_id = "\"user_id\"";
const std::string KvStore::Cols::_key_input = "\"key_input\"";
const std::string KvStore::Cols::_value_input = "\"value_input\"";
const std::string KvStore::Cols::_previous_value = "\"previous_value\"";
const std::string KvStore::Cols::_updated_at = "\"updated_at\"";
const std::string KvStore::primaryKeyName = "kv_id";
const bool KvStore::hasPrimaryKey = true;
const std::string KvStore::tableName = "\"kv_store\"";

const std::vector<typename KvStore::MetaData> KvStore::metaData_ = {
    {"kv_id", "int64_t", "bigint", 8, 1, 1, 1},
    {"user_id", "int64_t", "bigint", 8, 0, 0, 1},
    {"key_input", "std::string", "character varying", 255, 0, 0, 1},
    {"value_input", "std::string", "jsonb", 0, 0, 0, 1},
    {"previous_value", "std::string", "jsonb", 0, 0, 0, 0},
    {"updated_at", "::trantor::Date", "timestamp with time zone", 0, 0, 0, 1}};
const std::string &KvStore::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
KvStore::KvStore(const Row &r, const ssize_t indexOffset) noexcept
{
    if (indexOffset < 0)
    {
        if (!r["kv_id"].isNull())
        {
            kvId_ = std::make_shared<int64_t>(r["kv_id"].as<int64_t>());
        }
        if (!r["user_id"].isNull())
        {
            userId_ = std::make_shared<int64_t>(r["user_id"].as<int64_t>());
        }
        if (!r["key_input"].isNull())
        {
            keyInput_ = std::make_shared<std::string>(r["key_input"].as<std::string>());
        }
        if (!r["value_input"].isNull())
        {
            valueInput_ = std::make_shared<std::string>(r["value_input"].as<std::string>());
        }
        if (!r["previous_value"].isNull())
        {
            previousValue_ = std::make_shared<std::string>(r["previous_value"].as<std::string>());
        }
        if (!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if (offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull())
        {
            kvId_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if (!r[index].isNull())
        {
            userId_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 2;
        if (!r[index].isNull())
        {
            keyInput_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if (!r[index].isNull())
        {
            valueInput_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if (!r[index].isNull())
        {
            previousValue_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if (!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
}

KvStore::KvStore(const Json::Value &pJson,
                 const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            kvId_ = std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_ = std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            keyInput_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull())
        {
            valueInput_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull())
        {
            previousValue_ =
                std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
}

KvStore::KvStore(const Json::Value &pJson) noexcept(false)
{
    if (pJson.isMember("kv_id"))
    {
        dirtyFlag_[0] = true;
        if (!pJson["kv_id"].isNull())
        {
            kvId_ = std::make_shared<int64_t>((int64_t)pJson["kv_id"].asInt64());
        }
    }
    if (pJson.isMember("user_id"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["user_id"].isNull())
        {
            userId_ = std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if (pJson.isMember("key_input"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["key_input"].isNull())
        {
            keyInput_ = std::make_shared<std::string>(pJson["key_input"].asString());
        }
    }
    if (pJson.isMember("value_input"))
    {
        dirtyFlag_[3] = true;
        if (!pJson["value_input"].isNull())
        {
            valueInput_ = std::make_shared<std::string>(pJson["value_input"].asString());
        }
    }
    if (pJson.isMember("previous_value"))
    {
        dirtyFlag_[4] = true;
        if (!pJson["previous_value"].isNull())
        {
            previousValue_ = std::make_shared<std::string>(pJson["previous_value"].asString());
        }
    }
    if (pJson.isMember("updated_at"))
    {
        dirtyFlag_[5] = true;
        if (!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
}

void KvStore::updateByMasqueradedJson(
    const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            kvId_ = std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_ = std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            keyInput_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull())
        {
            valueInput_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull())
        {
            previousValue_ =
                std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
}

void KvStore::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if (pJson.isMember("kv_id"))
    {
        if (!pJson["kv_id"].isNull())
        {
            kvId_ = std::make_shared<int64_t>((int64_t)pJson["kv_id"].asInt64());
        }
    }
    if (pJson.isMember("user_id"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["user_id"].isNull())
        {
            userId_ = std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if (pJson.isMember("key_input"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["key_input"].isNull())
        {
            keyInput_ = std::make_shared<std::string>(pJson["key_input"].asString());
        }
    }
    if (pJson.isMember("value_input"))
    {
        dirtyFlag_[3] = true;
        if (!pJson["value_input"].isNull())
        {
            valueInput_ = std::make_shared<std::string>(pJson["value_input"].asString());
        }
    }
    if (pJson.isMember("previous_value"))
    {
        dirtyFlag_[4] = true;
        if (!pJson["previous_value"].isNull())
        {
            previousValue_ = std::make_shared<std::string>(pJson["previous_value"].asString());
        }
    }
    if (pJson.isMember("updated_at"))
    {
        dirtyFlag_[5] = true;
        if (!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
}

const int64_t &KvStore::getValueOfKvId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if (kvId_)
        return *kvId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &KvStore::getKvId() const noexcept
{
    return kvId_;
}
void KvStore::setKvId(const int64_t &pKvId) noexcept
{
    kvId_ = std::make_shared<int64_t>(pKvId);
    dirtyFlag_[0] = true;
}
const typename KvStore::PrimaryKeyType &KvStore::getPrimaryKey() const
{
    assert(kvId_);
    return *kvId_;
}

const int64_t &KvStore::getValueOfUserId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if (userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &KvStore::getUserId() const noexcept
{
    return userId_;
}
void KvStore::setUserId(const int64_t &pUserId) noexcept
{
    userId_ = std::make_shared<int64_t>(pUserId);
    dirtyFlag_[1] = true;
}

const std::string &KvStore::getValueOfKeyInput() const noexcept
{
    static const std::string defaultValue = std::string();
    if (keyInput_)
        return *keyInput_;
    return defaultValue;
}
const std::shared_ptr<std::string> &KvStore::getKeyInput() const noexcept
{
    return keyInput_;
}
void KvStore::setKeyInput(const std::string &pKeyInput) noexcept
{
    keyInput_ = std::make_shared<std::string>(pKeyInput);
    dirtyFlag_[2] = true;
}
void KvStore::setKeyInput(std::string &&pKeyInput) noexcept
{
    keyInput_ = std::make_shared<std::string>(std::move(pKeyInput));
    dirtyFlag_[2] = true;
}

const std::string &KvStore::getValueOfValueInput() const noexcept
{
    static const std::string defaultValue = std::string();
    if (valueInput_)
        return *valueInput_;
    return defaultValue;
}
const std::shared_ptr<std::string> &KvStore::getValueInput() const noexcept
{
    return valueInput_;
}
void KvStore::setValueInput(const std::string &pValueInput) noexcept
{
    valueInput_ = std::make_shared<std::string>(pValueInput);
    dirtyFlag_[3] = true;
}
void KvStore::setValueInput(std::string &&pValueInput) noexcept
{
    valueInput_ = std::make_shared<std::string>(std::move(pValueInput));
    dirtyFlag_[3] = true;
}

const std::string &KvStore::getValueOfPreviousValue() const noexcept
{
    static const std::string defaultValue = std::string();
    if (previousValue_)
        return *previousValue_;
    return defaultValue;
}
const std::shared_ptr<std::string> &KvStore::getPreviousValue() const noexcept
{
    return previousValue_;
}
void KvStore::setPreviousValue(const std::string &pPreviousValue) noexcept
{
    previousValue_ = std::make_shared<std::string>(pPreviousValue);
    dirtyFlag_[4] = true;
}
void KvStore::setPreviousValue(std::string &&pPreviousValue) noexcept
{
    previousValue_ = std::make_shared<std::string>(std::move(pPreviousValue));
    dirtyFlag_[4] = true;
}
void KvStore::setPreviousValueToNull() noexcept
{
    previousValue_.reset();
    dirtyFlag_[4] = true;
}

const ::trantor::Date &KvStore::getValueOfUpdatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if (updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &KvStore::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void KvStore::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[5] = true;
}

void KvStore::updateId(const uint64_t id)
{
}

const std::vector<std::string> &KvStore::insertColumns() noexcept
{
    static const std::vector<std::string> inCols = {"user_id", "key_input", "value_input",
                                                    "previous_value", "updated_at"};
    return inCols;
}

void KvStore::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if (dirtyFlag_[1])
    {
        if (getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getKeyInput())
        {
            binder << getValueOfKeyInput();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3])
    {
        if (getValueInput())
        {
            binder << getValueOfValueInput();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4])
    {
        if (getPreviousValue())
        {
            binder << getValueOfPreviousValue();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5])
    {
        if (getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> KvStore::updateColumns() const
{
    std::vector<std::string> ret;
    if (dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if (dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if (dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if (dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void KvStore::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if (dirtyFlag_[1])
    {
        if (getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getKeyInput())
        {
            binder << getValueOfKeyInput();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3])
    {
        if (getValueInput())
        {
            binder << getValueOfValueInput();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4])
    {
        if (getPreviousValue())
        {
            binder << getValueOfPreviousValue();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5])
    {
        if (getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value KvStore::toJson() const
{
    Json::Value ret;
    if (getKvId())
    {
        ret["kv_id"] = (Json::Int64)getValueOfKvId();
    }
    else
    {
        ret["kv_id"] = Json::Value();
    }
    if (getUserId())
    {
        ret["user_id"] = (Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"] = Json::Value();
    }
    if (getKeyInput())
    {
        ret["key_input"] = getValueOfKeyInput();
    }
    else
    {
        ret["key_input"] = Json::Value();
    }
    if (getValueInput())
    {
        ret["value_input"] = getValueOfValueInput();
    }
    else
    {
        ret["value_input"] = Json::Value();
    }
    if (getPreviousValue())
    {
        ret["previous_value"] = getValueOfPreviousValue();
    }
    else
    {
        ret["previous_value"] = Json::Value();
    }
    if (getUpdatedAt())
    {
        ret["updated_at"] = getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"] = Json::Value();
    }
    return ret;
}

Json::Value KvStore::toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if (pMasqueradingVector.size() == 6)
    {
        if (!pMasqueradingVector[0].empty())
        {
            if (getKvId())
            {
                ret[pMasqueradingVector[0]] = (Json::Int64)getValueOfKvId();
            }
            else
            {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty())
        {
            if (getUserId())
            {
                ret[pMasqueradingVector[1]] = (Json::Int64)getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty())
        {
            if (getKeyInput())
            {
                ret[pMasqueradingVector[2]] = getValueOfKeyInput();
            }
            else
            {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[3].empty())
        {
            if (getValueInput())
            {
                ret[pMasqueradingVector[3]] = getValueOfValueInput();
            }
            else
            {
                ret[pMasqueradingVector[3]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[4].empty())
        {
            if (getPreviousValue())
            {
                ret[pMasqueradingVector[4]] = getValueOfPreviousValue();
            }
            else
            {
                ret[pMasqueradingVector[4]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[5].empty())
        {
            if (getUpdatedAt())
            {
                ret[pMasqueradingVector[5]] = getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getKvId())
    {
        ret["kv_id"] = (Json::Int64)getValueOfKvId();
    }
    else
    {
        ret["kv_id"] = Json::Value();
    }
    if (getUserId())
    {
        ret["user_id"] = (Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"] = Json::Value();
    }
    if (getKeyInput())
    {
        ret["key_input"] = getValueOfKeyInput();
    }
    else
    {
        ret["key_input"] = Json::Value();
    }
    if (getValueInput())
    {
        ret["value_input"] = getValueOfValueInput();
    }
    else
    {
        ret["value_input"] = Json::Value();
    }
    if (getPreviousValue())
    {
        ret["previous_value"] = getValueOfPreviousValue();
    }
    else
    {
        ret["previous_value"] = Json::Value();
    }
    if (getUpdatedAt())
    {
        ret["updated_at"] = getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"] = Json::Value();
    }
    return ret;
}

bool KvStore::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if (pJson.isMember("kv_id"))
    {
        if (!validJsonOfField(0, "kv_id", pJson["kv_id"], err, true))
            return false;
    }
    if (pJson.isMember("user_id"))
    {
        if (!validJsonOfField(1, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err = "The user_id column cannot be null";
        return false;
    }
    if (pJson.isMember("key_input"))
    {
        if (!validJsonOfField(2, "key_input", pJson["key_input"], err, true))
            return false;
    }
    else
    {
        err = "The key_input column cannot be null";
        return false;
    }
    if (pJson.isMember("value_input"))
    {
        if (!validJsonOfField(3, "value_input", pJson["value_input"], err, true))
            return false;
    }
    else
    {
        err = "The value_input column cannot be null";
        return false;
    }
    if (pJson.isMember("previous_value"))
    {
        if (!validJsonOfField(4, "previous_value", pJson["previous_value"], err, true))
            return false;
    }
    if (pJson.isMember("updated_at"))
    {
        if (!validJsonOfField(5, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    return true;
}
bool KvStore::validateMasqueradedJsonForCreation(
    const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector, std::string &err)
{
    if (pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try
    {
        if (!pMasqueradingVector[0].empty())
        {
            if (pJson.isMember(pMasqueradingVector[0]))
            {
                if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err,
                                      true))
                    return false;
            }
        }
        if (!pMasqueradingVector[1].empty())
        {
            if (pJson.isMember(pMasqueradingVector[1]))
            {
                if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err,
                                      true))
                    return false;
            }
            else
            {
                err = "The " + pMasqueradingVector[1] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[2].empty())
        {
            if (pJson.isMember(pMasqueradingVector[2]))
            {
                if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err,
                                      true))
                    return false;
            }
            else
            {
                err = "The " + pMasqueradingVector[2] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[3].empty())
        {
            if (pJson.isMember(pMasqueradingVector[3]))
            {
                if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err,
                                      true))
                    return false;
            }
            else
            {
                err = "The " + pMasqueradingVector[3] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[4].empty())
        {
            if (pJson.isMember(pMasqueradingVector[4]))
            {
                if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err,
                                      true))
                    return false;
            }
        }
        if (!pMasqueradingVector[5].empty())
        {
            if (pJson.isMember(pMasqueradingVector[5]))
            {
                if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err,
                                      true))
                    return false;
            }
        }
    }
    catch (const Json::LogicError &e)
    {
        err = e.what();
        return false;
    }
    return true;
}
bool KvStore::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if (pJson.isMember("kv_id"))
    {
        if (!validJsonOfField(0, "kv_id", pJson["kv_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (pJson.isMember("user_id"))
    {
        if (!validJsonOfField(1, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if (pJson.isMember("key_input"))
    {
        if (!validJsonOfField(2, "key_input", pJson["key_input"], err, false))
            return false;
    }
    if (pJson.isMember("value_input"))
    {
        if (!validJsonOfField(3, "value_input", pJson["value_input"], err, false))
            return false;
    }
    if (pJson.isMember("previous_value"))
    {
        if (!validJsonOfField(4, "previous_value", pJson["previous_value"], err, false))
            return false;
    }
    if (pJson.isMember("updated_at"))
    {
        if (!validJsonOfField(5, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    return true;
}
bool KvStore::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if (pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try
    {
        if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
        {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err,
                                  false))
                return false;
        }
        else
        {
            err = "The value of primary key must be set in the json object for update";
            return false;
        }
        if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
        {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err,
                                  false))
                return false;
        }
        if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
        {
            if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err,
                                  false))
                return false;
        }
        if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
        {
            if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err,
                                  false))
                return false;
        }
        if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
        {
            if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err,
                                  false))
                return false;
        }
        if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
        {
            if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err,
                                  false))
                return false;
        }
    }
    catch (const Json::LogicError &e)
    {
        err = e.what();
        return false;
    }
    return true;
}
bool KvStore::validJsonOfField(size_t index, const std::string &fieldName, const Json::Value &pJson,
                               std::string &err, bool isForCreation)
{
    switch (index)
    {
    case 0:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (isForCreation)
        {
            err = "The automatic primary key cannot be set";
            return false;
        }
        if (!pJson.isInt64())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 1:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isInt64())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 2:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        if (pJson.isString() && std::strlen(pJson.asCString()) > 255)
        {
            err = "String length exceeds limit for the " + fieldName +
                  " field (the maximum value is 255)";
            return false;
        }

        break;
    case 3:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 4:
        if (pJson.isNull())
        {
            return true;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 5:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    default:
        err = "Internal error in the server";
        return false;
    }
    return true;
}
